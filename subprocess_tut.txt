import subprocess

subprocess.run('ls')
>files in pwd

subprocess.run('ls', shell=True)
admin trust, security hazard

subprocess.run('ls -la')
will not work, unless using shell=True, 
pass list of arguments

p1=subprocess.run('ls -la')
Completed process object...

print(p1.args)
print arguments used in commands as list

print(p1.returncode)
0=successful, 1=error

pritn(p1.stdout)
None<?> There is none you want to capture import

p1=subprocess.run(['ls','-la'], capture_output=True)
nothing prints
print(p1.stdout)
print messy capture

p1=subprocess.run(['ls','-la'], capture_output=True)
print(p1.stdout.decode())
looks nice now

p1=subprocess.run(['ls','-la'], capture_output=True, text=True)
print(p1.stdout)
looks good too

p1=subprocess.run(['ls','-la'], capture_output=True, text=True)
is equal to
p1=subprocess.run(['ls','-la'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)


with open('output.txt', 'w') as f:
    p1=subprocess.run(['ls','-la'], stdout=f , text=True)


p1=subprocess.run(['ls','-la'], capture_output=True, text=True, check=True)
if error python will let you know

p1=subprocess.run(['ls','-la', 'dne'], stderr=subprocess.DEVNULL)
no error will be reported

